package orm

import (
	"bytes"
	"fmt"
	"text/template"

	"github.com/gophersbd/ormpb/pkg/descriptor"
)

func printInterface(v interface{}) string {
	return fmt.Sprintf(`"%v"`, v)
}

type param struct {
	*descriptor.File
	Imports []descriptor.GoPackage
}

func applyTemplate(p param) (string, error) {
	w := bytes.NewBuffer(nil)

	helperTemplate := template.New("orm")
	helperTemplate.Funcs(template.FuncMap{"printInterface": printInterface})

	ormTemplate := template.Must(helperTemplate.Parse(ormTemplate))

	if err := ormTemplate.Execute(w, p); err != nil {
		return "", err
	}
	return w.String(), nil
}

var (
	ormTemplate = `
// Code generated by protoc-gen-orm. DO NOT EDIT.
// source: {{ .GetName }}

package {{ .GoPkg.Name }}

import (
	{{range $i := .Imports}}
		{{if not $i.Standard}}
			{{ $i.Name }} "{{ $i.Path }}"
		{{end}}
	{{end}}
)

{{ range $msg := .Messages }}

func (*{{ $msg.Name }}) TableName() string {
	return "{{ $msg.TableOptions.GetName }}"
}

var (
	_{{ $msg.Name }}TagMap = map[string]map[string]string{
		{{- range $f := $msg.Fields }}
		"{{ $f.Name }}": {
			{{- range $key, $value := $f.ColumnTags }}
				{{- if $value }}
					runtime.ColumnTag{{ $key }}: {{ $value | printInterface }},
				{{- end }}
			{{- end }}
		},
		{{- end }}
	}
)

func (*{{ $msg.Name }}) Tag(field, tag string) (val string, found bool) {
	val, found = _{{ $msg.Name }}TagMap[field][tag]
	return
}
{{- end }}
`
)
