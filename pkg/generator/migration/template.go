package migration

import (
	"bytes"
	"reflect"
	"text/template"
	"unicode"

	"github.com/gophersbd/ormpb/pkg/descriptor"
)

// ToSnake converts column name to Snake case
func ToSnake(in string) string {
	runes := []rune(in)
	length := len(runes)

	var out []rune
	for i := 0; i < length; i++ {
		if i > 0 && unicode.IsUpper(runes[i]) && ((i+1 < length && unicode.IsLower(runes[i+1])) || unicode.IsLower(runes[i-1])) {
			out = append(out, '_')
		}
		out = append(out, unicode.ToLower(runes[i]))
	}
	return string(out)
}

var fns = template.FuncMap{
	"not_last": func(x int, a interface{}) bool {
		return x != reflect.ValueOf(a).Len()-1
	},
}

type param struct {
	*descriptor.Message
}

func applyTemplateComment(file *descriptor.File) (string, error) {
	w := bytes.NewBuffer(nil)

	helperTemplate := template.New("comment")
	migrationCommentTemplate := template.Must(helperTemplate.Parse(migrationCommentTemplate))

	if err := migrationCommentTemplate.Execute(w, file); err != nil {
		return "", err
	}
	return w.String(), nil
}

func applyTemplateUp(p param) (string, error) {
	w := bytes.NewBuffer(nil)

	helperTemplate := template.New("up")
	helperTemplate = helperTemplate.Funcs(template.FuncMap{"toSnake": ToSnake})
	helperTemplate = helperTemplate.Funcs(fns)
	migrationUpTemplate := template.Must(helperTemplate.Parse(migrationUpTemplate))

	if err := migrationUpTemplate.Execute(w, p); err != nil {
		return "", err
	}
	return w.String(), nil
}

func applyTemplateDown(p param) (string, error) {
	w := bytes.NewBuffer(nil)

	helperTemplate := template.New("down")
	helperTemplate = helperTemplate.Funcs(template.FuncMap{"toSnake": ToSnake})
	helperTemplate = helperTemplate.Funcs(fns)
	migrationDownTemplate := template.Must(helperTemplate.Parse(migrationDownTemplate))

	if err := migrationDownTemplate.Execute(w, p); err != nil {
		return "", err
	}
	return w.String(), nil
}

var (
	migrationCommentTemplate = `/*
	Migration file generated by protoc-gen-orm. DO NOT EDIT.
	source: {{ .GetName }}
*/
`
	migrationUpTemplate = `/* Generated for {{ .GetName }} */
CREATE TABLE {{ .TableOptions.GetName | toSnake }} (
{{- range $i, $f := .Fields }}
	{{ $f.Column.Name | toSnake }} {{ $f.Column.Signature }}{{if not_last $i $.Fields}},{{end}}
{{- end }}
);
`
	migrationDownTemplate = `/* Generated for {{ .GetName }} */
DROP TABLE IF EXISTS {{ .TableOptions.GetName | toSnake }};
`
)
