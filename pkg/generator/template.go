package generator

import (
	"bytes"
	"reflect"
	"text/template"

	"github.com/gophersbd/ormpb/pkg/descriptor"
	"github.com/gophersbd/ormpb/protobuf"
)

type param struct {
	*descriptor.File
	Imports    []descriptor.GoPackage
	ColumnTags []string
}

func applyTemplate(p param) (string, error) {
	w := bytes.NewBuffer(nil)

	p.ColumnTags = make([]string, 0)
	t := protobuf.ColumnOptions{}
	co := reflect.ValueOf(&t).Elem()
	typeOfCO := co.Type()

	for i := 0; i < co.NumField(); i++ {
		p.ColumnTags = append(p.ColumnTags, typeOfCO.Field(i).Name)
	}

	if err := ormTemplate.Execute(w, p); err != nil {
		return "", err
	}
	return w.String(), nil
}

var (
	ormTemplate = template.Must(template.New("orm").Parse(`
// Code generated by protoc-gen-orm. DO NOT EDIT.
// source: {{ .GetName }}

package {{ .GoPkg.Name }}

const(
{{ range $t := .ColumnTags }}
ColumnTag{{ $t }} = "{{ $t }}"
{{- end }}
)

{{ range $msg := .Messages }}

func (*{{ $msg.Name }}) TableName() string {
	return "{{ $msg.TableOption.GetName }}"
}

var (
	_{{ $msg.Name }}TagMap = map[string]map[string]string{
		{{- range $f := $msg.Fields }}
		"{{ $f.Name }}": {
			{{- range $key, $value := $f.ColumnTags }}
				{{- if $value }}
					ColumnTag{{ $key }}: "{{ $value }}",
				{{- end }}
			{{- end }}
		},
		{{- end }}
	}
)

func (*{{ $msg.Name }}) Tag(field, tag string) (val string, found bool) {
	val, found = _{{ $msg.Name }}TagMap[field][tag]
	return
}
{{- end }}

`))
)
